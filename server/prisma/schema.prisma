generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  firstName     String
  lastName      String
  password      String
  role          Role            @relation(fields: [roleId], references: [id])
  roleId        String
  CompanyReview CompanyReview[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model CompanyReview {
  id                String              @id @default(uuid())
  rating            Float
  title             String?
  description       String?
  recommend         Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  companyArea       CompanyArea?        @relation(fields: [companyAreaId], references: [id])
  companyAreaId     String?
  company           Company             @relation(fields: [companyId], references: [id])
  companyId         String
  user              User                @relation(fields: [userId], references: [id])
  userId            String
  companyReviewPros CompanyReviewPros[]
  companyReviewCons CompanyReviewCons[]
  companyReviewTags CompanyReviewTags[]
}

model CompanyReviewPros {
  id              String        @id @default(uuid())
  description     String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  companyReview   CompanyReview @relation(fields: [companyReviewId], references: [id])
  companyReviewId String
}

model CompanyReviewCons {
  id              String        @id @default(uuid())
  description     String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  companyReview   CompanyReview @relation(fields: [companyReviewId], references: [id])
  companyReviewId String
}

model CompanyReviewTags {
  id              String        @id @default(uuid())
  name            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  companyReview   CompanyReview @relation(fields: [companyReviewId], references: [id])
  companyReviewId String
}

model Company {
  id          String          @id @default(uuid())
  name        String
  description String?
  industry    String?
  website     String?
  foundedYear Int?
  employees   Int?
  reviews     CompanyReview[]
  jobs        Job[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model CompanyArea {
  id            String          @id @default(uuid())
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  CompanyReview CompanyReview[]
}

model Job {
  id          String   @id @default(uuid())
  title       String
  description String?
  salary      Int
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company? @relation(fields: [companyId], references: [id])
  companyId   String?
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[]
}
