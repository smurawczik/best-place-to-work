datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  password  Password?
  reviews   Review[]
  salaries  Salary[]
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
}

model Company {
  id       String   @id @default(uuid())
  name     String
  reviews  Review[]
  salaries Salary[]
  jobs     Job[]
}

model Salary {
  id         String   @id @default(uuid())
  amount     Float
  currency   Currency @relation(fields: [currencyId], references: [id])
  currencyId String
  category   String
  country    Country  @relation(fields: [countryId], references: [id])
  countryId  String
  state      State    @relation(fields: [stateId], references: [id])
  stateId    String
  city       City     @relation(fields: [cityId], references: [id])
  cityId     String
  remote     Boolean
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId     String?
  company    Company  @relation(fields: [companyId], references: [id])
  companyId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Currency {
  id       String   @id @default(uuid())
  code     String   @unique
  name     String
  symb     String   @default("$") // Add currency symbol
  salaries Salary[]
}

model Job {
  id          String   @id @default(uuid())
  title       String
  description String?
  company     Company? @relation(fields: [companyId], references: [id])
  companyId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Country {
  id       String   @id @default(uuid())
  name     String
  emoji    String
  states   State[]
  cities   City[]
  salaries Salary[]
}

model State {
  id        String   @id @default(uuid())
  name      String
  country   Country  @relation(fields: [countryId], references: [id])
  countryId String
  salaries  Salary[]
  City      City[]
}

model City {
  id        String   @id @default(uuid())
  name      String
  country   Country  @relation(fields: [countryId], references: [id])
  countryId String
  state     State    @relation(fields: [stateId], references: [id])
  stateId   String
  salaries  Salary[]
}
